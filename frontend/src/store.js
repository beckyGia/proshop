import { configureStore } from "@reduxjs/toolkit";
import { apiSlice } from "./slices/apiSlice";
import cartSliceReducer from "./slices/cartSlice";
import authSliceReducer from "./slices/authSlice";

const store = configureStore({
  reducer: {
    [apiSlice.reducerPath]: apiSlice.reducer,
    cart: cartSliceReducer,
    auth: authSliceReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(apiSlice.middleware),
  devTools: true,
});

export default store;

/*
apiSlice.reducerPath: This is a string that typically represents the path where this slice's state will be stored in the Redux store. The reducerPath is automatically generated by createApi or createSlice and usually looks something like 'api'.

apiSlice.reducer: This is the reducer function generated by createApi. It handles all the state logic related to the API (e.g., caching data, tracking loading states, etc.). The state managed by this reducer will be available in the store under the key defined by 

[ ... ]: The square brackets around apiSlice.reducerPath allow you to use the value of apiSlice.reducerPath as the key in the reducer object. This is known as a computed property name in JavaScript.
*/

/*
middleware: Middleware in Redux allows you to intercept actions before they reach the reducers, enabling you to add additional logic, such as asynchronous API calls, logging, or modifying actions.

getDefaultMiddleware: This is a function provided by @reduxjs/toolkit that returns the default middleware array, which typically includes middleware like redux-thunk for handling asynchronous actions.

getDefaultMiddleware().concat(apiSlice.middleware): This line adds custom middleware provided by apiSlice to the array of default middleware. apiSlice.middleware is necessary for managing API-related actions, like automatically handling caching, invalidating data, and more.
*/
